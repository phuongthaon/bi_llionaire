import { NextResponse } from 'next/server';

const GOLD_API = 'http://api.btmc.vn/api/BTMCAPI/getpricebtmc?key=3kd8ub1llcg9t45hnoh8hmn7t5kc2v';
const TELEGRAM_TOKEN = '7679781471:AAGWWgZgFZ-lkXZBHFiOjx7wyYsgrBV2UYA';
const TELEGRAM_CHAT_ID = '5327342037';
const UPDATE_INTERVAL = 8 * 60 * 60 * 1000; // 8 ti·∫øng

interface GoldPrice {
    name: string;
    buy: number;
    sell: number;
    date: string;
    purity: string;
}

// Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t vi·ªác g·ª≠i tin nh·∫Øn ƒë·ªãnh k·ª≥
let isScheduled = false;
let intervalId: NodeJS.Timeout | null = null;
let nextUpdateTime: Date | null = null;
let lastPrices: GoldPrice[] = [];

// H√†m l·∫•y d·ªØ li·ªáu gi√° v√†ng
async function fetchGoldPrices(): Promise<GoldPrice[]> {
    try {
        const response = await fetch(GOLD_API);
        const data = await response.json();
        const goldPrices = data.DataList.Data;

        return goldPrices
            .filter((price: any) => {
                const row = price['@row'];
                const name = price[`@n_${row}`];
                const buy = price[`@pb_${row}`];
                const sell = price[`@ps_${row}`];
                const purity = price[`@h_${row}`];

                return name && buy && sell && sell !== '0' && purity;
            })
            .map((price: any) => {
                const row = price['@row'];
                return {
                    name: price[`@n_${row}`],
                    buy: parseInt(price[`@pb_${row}`]),
                    sell: parseInt(price[`@ps_${row}`]),
                    date: price[`@d_${row}`],
                    purity: price[`@h_${row}`]
                };
            })
            .filter((price: GoldPrice) => !isNaN(price.buy) && !isNaN(price.sell));
    } catch (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu gi√° v√†ng:', error);
        return [];
    }
}

// H√†m ki·ªÉm tra xem gi√° c√≥ thay ƒë·ªïi kh√¥ng
function hasPriceChanged(newPrices: GoldPrice[]): boolean {
    if (lastPrices.length === 0) return true;

    return newPrices.some((newPrice, index) => {
        const oldPrice = lastPrices[index];
        return !oldPrice ||
            newPrice.buy !== oldPrice.buy ||
            newPrice.sell !== oldPrice.sell;
    });
}

// H√†m g·ª≠i tin nh·∫Øn gi√° v√†ng
async function sendGoldPriceMessage() {
    try {
        const newPrices = await fetchGoldPrices();

        // Ch·ªâ g·ª≠i tin nh·∫Øn n·∫øu gi√° thay ƒë·ªïi
        if (hasPriceChanged(newPrices)) {
            lastPrices = newPrices;

            // Nh√≥m theo th∆∞∆°ng hi·ªáu
            const groupedPrices = newPrices.reduce((acc: { [key: string]: GoldPrice[] }, price) => {
                const brand = price.name.split('(').pop()?.replace(')', '').trim() || 'Kh√°c';
                if (!acc[brand]) {
                    acc[brand] = [];
                }
                acc[brand].push(price);
                return acc;
            }, {});

            // C·∫≠p nh·∫≠t th·ªùi gian c·∫≠p nh·∫≠t ti·∫øp theo
            nextUpdateTime = new Date(Date.now() + UPDATE_INTERVAL);

            // T·∫°o tin nh·∫Øn
            let message = `üìä *C·∫≠p nh·∫≠t gi√° v√†ng ${new Date().toLocaleString('vi-VN')}*\n\n`;

            // Th√™m gi√° v√†ng theo t·ª´ng th∆∞∆°ng hi·ªáu
            Object.entries(groupedPrices).forEach(([brand, prices]) => {
                message += `*${brand}*\n`;
                prices.forEach(price => {
                    const name = price.name.split('(')[0].trim();
                    const difference = price.sell - price.buy;
                    const differenceEmoji = difference > 0 ? 'üìà' : 'üìâ';

                    message += `‚Ä¢ ${name} (${price.purity}‚Ä∞)\n`;
                    message += `  üí∞ Mua v√†o: ${price.buy.toLocaleString('vi-VN')}ƒë\n`;
                    message += `  üíµ B√°n ra: ${price.sell.toLocaleString('vi-VN')}ƒë\n`;
                    message += `  ${differenceEmoji} Ch√™nh l·ªách: ${Math.abs(difference).toLocaleString('vi-VN')}ƒë\n`;
                });
                message += '\n';
            });

            message += `\n‚è∞ L·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo: ${nextUpdateTime.toLocaleString('vi-VN')}\n`;
            message += `üì± _Ngu·ªìn: BTMC_`;

            // G·ª≠i tin nh·∫Øn qua Telegram
            const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}&parse_mode=Markdown`;
            await fetch(telegramUrl);

            console.log('ƒê√£ g·ª≠i tin nh·∫Øn gi√° v√†ng:', new Date().toLocaleString('vi-VN'));
        } else {
            console.log('Gi√° v√†ng kh√¥ng thay ƒë·ªïi:', new Date().toLocaleString('vi-VN'));
            // C·∫≠p nh·∫≠t th·ªùi gian c·∫≠p nh·∫≠t ti·∫øp theo
            nextUpdateTime = new Date(Date.now() + UPDATE_INTERVAL);
        }
    } catch (error) {
        console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
    }
}

export async function GET() {
    try {
        if (!isScheduled) {
            // G·ª≠i tin nh·∫Øn ngay l·∫≠p t·ª©c
            await sendGoldPriceMessage();

            // Thi·∫øt l·∫≠p l·ªãch c·∫≠p nh·∫≠t gi√° v√†ng m·ªói 8 ti·∫øng
            intervalId = setInterval(sendGoldPriceMessage, UPDATE_INTERVAL);
            isScheduled = true;

            return NextResponse.json({
                success: true,
                message: 'ƒê√£ thi·∫øt l·∫≠p l·ªãch c·∫≠p nh·∫≠t gi√° v√†ng m·ªói 8 ti·∫øng'
            });
        }

        return NextResponse.json({
            success: true,
            message: 'L·ªãch c·∫≠p nh·∫≠t gi√° v√†ng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p tr∆∞·ªõc ƒë√≥',
            nextUpdate: nextUpdateTime?.toLocaleString('vi-VN')
        });
    } catch (error) {
        console.error('L·ªói khi thi·∫øt l·∫≠p l·ªãch c·∫≠p nh·∫≠t:', error);
        return NextResponse.json({
            success: false,
            error: 'C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p l·ªãch c·∫≠p nh·∫≠t'
        }, { status: 500 });
    }
}

// H√†m ƒë·ªÉ d·ª´ng c·∫≠p nh·∫≠t gi√° v√†ng
export async function POST() {
    try {
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
            isScheduled = false;
            nextUpdateTime = null;
            lastPrices = [];
            return NextResponse.json({
                success: true,
                message: 'ƒê√£ d·ª´ng c·∫≠p nh·∫≠t gi√° v√†ng'
            });
        }

        return NextResponse.json({
            success: true,
            message: 'Kh√¥ng c√≥ l·ªãch c·∫≠p nh·∫≠t n√†o ƒëang ch·∫°y'
        });
    } catch (error) {
        console.error('L·ªói khi d·ª´ng c·∫≠p nh·∫≠t:', error);
        return NextResponse.json({
            success: false,
            error: 'C√≥ l·ªói x·∫£y ra khi d·ª´ng c·∫≠p nh·∫≠t'
        }, { status: 500 });
    }
} 